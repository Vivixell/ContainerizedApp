name: Full CI/CD Pipeline

on:
  push:
    branches: ["dev"]
  workflow_dispatch:

jobs:
  backend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd backend
          npm install

      - name: Run lint
        run: |
          cd backend
          npm run lint || echo "Lint step skipped or failed"

      - name: Run tests
        run: |
          cd backend
          npm test || echo "Tests skipped or failed"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build backend image
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/dream-vacation-backend:${{ github.sha }} \
            ./backend

      - name: Push backend image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/dream-vacation-backend:${{ github.sha }}

  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: |
          cd frontend
          npm install

      - name: Run lint
        run: |
          cd frontend
          npm run lint || echo "Lint step skipped or failed"

      - name: Run tests
        run: |
          cd frontend
          npm test || echo "Tests skipped or failed"

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build frontend image
        run: |
          docker build \
            -t ${{ secrets.DOCKER_USERNAME }}/dream-vacation-frontend:${{ github.sha }} \
            ./frontend

      - name: Push frontend image
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/dream-vacation-frontend:${{ github.sha }}

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    outputs:
      ec2_public_ip: ${{ steps.get-ip.outputs.ec2_public_ip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: |
          cd terraform
          terraform init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -var="public_key=${{ secrets.PUBLIC_KEY }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        run: |
          cd terraform
          terraform apply -auto-approve -var="public_key=${{ secrets.PUBLIC_KEY }}"
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Get EC2 Public IP
        id: get-ip
        run: |
          cd terraform
          echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  app-deploy:
    runs-on: ubuntu-latest
    needs: [terraform-deploy]
    env:
      SHA: ${{ github.sha }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      EC2_HOST: ${{ needs.terraform-deploy.outputs.ec2_public_ip }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Wait for EC2 to be reachable
        run: |
          for i in {1..30}; do
            if nc -zv ${{ needs.terraform-deploy.outputs.ec2_public_ip }} 22 2>/dev/null; then
              echo "EC2 is reachable"
              exit 0
            fi
            echo "Waiting for EC2 to be reachable..."
            sleep 10
          done
          echo "EC2 not reachable after 5 minutes"
          exit 1

      - name: Copy docker-compose.yml and .env files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ needs.terraform-deploy.outputs.ec2_public_ip }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: "docker-compose.yml,backend/.env"
          target: "/home/${{ secrets.EC2_USER }}/dream-vacation"
          strip_components: 0
          rm: true

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ needs.terraform-deploy.outputs.ec2_public_ip }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          envs: SHA,DOCKER_USERNAME
          script: |
            # Log in to Docker Hub
            echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

            # Navigate to project directory
            cd /home/${{ secrets.EC2_USER }}/dream-vacation

            # Set environment variables for images
            export FRONTEND_IMAGE="${DOCKER_USERNAME}/dream-vacation-frontend:${SHA}"
            export BACKEND_IMAGE="${DOCKER_USERNAME}/dream-vacation-backend:${SHA}"
            if [ -z "${FRONTEND_IMAGE}" ] || [ -z "${BACKEND_IMAGE}" ]; then
              echo "Error: Image variables empty"
              exit 1
            fi

            # Stop and remove previous containers
            docker compose down --remove-orphans -v || true

            # Pull the latest Docker images
            docker compose pull || { echo "Failed to pull images"; exit 1; }

            # Start containers
            docker compose up -d || { echo "Failed to start containers"; exit 1; }