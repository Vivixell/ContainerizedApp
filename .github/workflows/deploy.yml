name: Full CI/CD Pipeline

on:
  push:
    branches: ["dev"]
  workflow_dispatch:

jobs:
  backend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      - run: cd backend && npm install
      - run: cd backend && npm run lint || echo "Lint step skipped or failed"
      - run: cd backend && npm test || echo "Tests skipped or failed"
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - run: docker build -t ${{ secrets.DOCKER_USERNAME }}/dream-vacation-backend:${{ github.sha }} ./backend
      - run: docker push ${{ secrets.DOCKER_USERNAME }}/dream-vacation-backend:${{ github.sha }}

  frontend-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with: { node-version: 18 }
      - run: cd frontend && npm install
      - run: cd frontend && npm run lint || echo "Lint step skipped or failed"
      - run: cd frontend && npm test || echo "Tests skipped or failed"
      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - run: docker build -t ${{ secrets.DOCKER_USERNAME }}/dream-vacation-frontend:${{ github.sha }} ./frontend
      - run: docker push ${{ secrets.DOCKER_USERNAME }}/dream-vacation-frontend:${{ github.sha }}

  terraform-deploy:
    runs-on: ubuntu-latest
    needs: [backend-build, frontend-build]
    defaults:
      run:
        working-directory: terraform
    outputs:
      ec2_public_ip: ${{ steps.get-ip.outputs.ec2_public_ip }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            us-west-1

      - name: Terraform Plan
        run: |
          terraform plan \
            -var="vpc_cidr_blocks=10.0.0.0/16" \
            -var="subnet_cidr_blocks=10.0.1.0/24" \
            -var="avail_zone=us-west-1b" \
            -var="instance_type=t3.medium" \
            -var="public_key=${{ secrets.PUBLIC_KEY }}"
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            us-west-1

      - name: Terraform Apply
        run: |
          terraform apply -auto-approve \
            -var="vpc_cidr_blocks=10.0.0.0/16" \
            -var="subnet_cidr_blocks=10.0.1.0/24" \
            -var="avail_zone=us-west-1b" \
            -var="instance_type=t2.micro" \
            -var="public_key=${{ secrets.PUBLIC_KEY }}"
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            us-west-1

      - name: Get EC2 Public IP
        id: get-ip
        run: echo "ec2_public_ip=$(terraform output -raw ec2_public_ip)" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION:            us-west-1

  app-deploy:
    runs-on: ubuntu-latest
    needs: [terraform-deploy]
    env:
      SHA: ${{ github.sha }}
      DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
    steps:
      - uses: actions/checkout@v4

      - name: Copy docker-compose.yml and envs to EC2
        uses: appleboy/scp-action@master
        with:
          host:     ${{ needs.terraform-deploy.outputs.ec2_public_ip }}
          username: ${{ secrets.EC2_USER }}     # likely "ubuntu"
          key:      ${{ secrets.EC2_KEY }}      # private key matching PUBLIC_KEY
          source:   "docker-compose.yml,backend/.env"
          target:   "/home/${{ secrets.EC2_USER }}/dream-vacation"
          strip_components: 0
          rm: true

      - name: Deploy via SSH
        uses: appleboy/ssh-action@master
        with:
          host:     ${{ needs.terraform-deploy.outputs.ec2_public_ip }}
          username: ${{ secrets.EC2_USER }}
          key:      ${{ secrets.EC2_KEY }}
          envs:     SHA,DOCKER_USERNAME
          script: |
            set -e
            cd /home/${{ secrets.EC2_USER }}/dream-vacation

            export FRONTEND_IMAGE="${DOCKER_USERNAME}/dream-vacation-frontend:${SHA}"
            export BACKEND_IMAGE="${DOCKER_USERNAME}/dream-vacation-backend:${SHA}"
            echo "FRONTEND_IMAGE=$FRONTEND_IMAGE"
            echo "BACKEND_IMAGE=$BACKEND_IMAGE"

            # If Docker wasn't ready from cloud-init timing, ensure it's present
            if ! command -v docker >/dev/null 2>&1; then
              sudo apt-get update -y
              sudo apt-get install -y ca-certificates curl
              sudo install -m 0755 -d /etc/apt/keyrings
              sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
              sudo chmod a+r /etc/apt/keyrings/docker.asc
              echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
              sudo apt-get update -y
              sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
              sudo usermod -aG docker $USER || true
              sudo systemctl enable docker
              sudo systemctl start docker
            fi

            docker compose down --remove-orphans -v || true
            docker compose pull
            docker compose up -d
